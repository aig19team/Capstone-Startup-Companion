/*
  # Create Storage Bucket for Business Documents

  ## Overview
  Sets up a secure storage bucket for PDF documents generated by the application.
  Each user can upload, view, and manage their own documents.

  ## Storage Bucket
  - `business-documents` - Stores all generated PDF files
    - Private bucket (not publicly accessible)
    - 10MB file size limit per file
    - Only accepts PDF files (application/pdf)
    - Files organized by user_id and document_type

  ## Security Policies
  - Users can only access files in their own folder (identified by user_id in path)
  - Authenticated users required for all operations
  - File path structure: {user_id}/{document_type}/{filename}.pdf

  ## File Organization
  Example paths:
  - {user_id}/registration/registration-guide-2024-10-26.pdf
  - {user_id}/branding/branding-guide-2024-10-26.pdf
  - {user_id}/compliance/compliance-guide-2024-10-26.pdf
  - {user_id}/hr/hr-guide-2024-10-26.pdf
*/

-- Create storage bucket for business documents
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
  'business-documents',
  'business-documents',
  true,
  10485760,
  ARRAY['application/pdf']
)
ON CONFLICT (id) DO NOTHING;

-- Policy: Allow authenticated users to upload documents to their own folder
CREATE POLICY "Users can upload own documents"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'business-documents' AND
  (storage.foldername(name))[1] = auth.uid()::text
);

-- Policy: Allow authenticated users to view their own documents
CREATE POLICY "Users can view own documents"
ON storage.objects FOR SELECT
TO authenticated
USING (
  bucket_id = 'business-documents' AND
  (storage.foldername(name))[1] = auth.uid()::text
);

-- Policy: Allow authenticated users to update their own documents
CREATE POLICY "Users can update own documents"
ON storage.objects FOR UPDATE
TO authenticated
USING (
  bucket_id = 'business-documents' AND
  (storage.foldername(name))[1] = auth.uid()::text
)
WITH CHECK (
  bucket_id = 'business-documents' AND
  (storage.foldername(name))[1] = auth.uid()::text
);

-- Policy: Allow authenticated users to delete their own documents
CREATE POLICY "Users can delete own documents"
ON storage.objects FOR DELETE
TO authenticated
USING (
  bucket_id = 'business-documents' AND
  (storage.foldername(name))[1] = auth.uid()::text
);
